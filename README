LabResultParser Setup Guide for Windows
LabResultParser is a Python script tailored for analyzing laboratory result files on Windows systems. This guide walks you through setting up your environment, installing necessary dependencies, and running the script.

Prerequisites
Ensure the following tools are installed on your Windows system before proceeding:

Python 3.6 or newer
pip (comes with Python 3.4 and above)
Environment Setup
Install Python
If Python is not already installed, download it from the official Python website. During installation:

Check the box to Add Python to PATH to make it accessible from the command prompt.
Create a Virtual Environment (Optional)
A virtual environment is recommended to isolate project dependencies. Open Command Prompt and navigate to your project directory:

cmd
Copy code
cd path\to\your\project
Create a virtual environment named venv:

cmd
Copy code
python -m venv venv
Activate the Virtual Environment
Activate your virtual environment to use it for installing dependencies and running the script:

cmd
Copy code
.\venv\Scripts\activate
Your prompt will change to indicate that the virtual environment is active, shown by (venv) prefix.

Install Dependencies
With the virtual environment active, install the required package using pip:

cmd
Copy code
pip install numpy
This command installs numpy, a dependency required for the script to run.

Running the LabResultParser Script
Prepare Your Data File
Ensure your data file, named 05_02_2024-11_55, is in the same directory as the parser.py script. This setup allows the script to locate and read the file without additional configuration.

Execute the Script
Open Command Prompt in the directory containing parser.py (ensure your virtual environment is active if using one) and run the script:

cmd
Copy code
python parser.py
This executes the script, processing the input data file and generating output files in the same directory.

Review the Output
After execution, review the output files generated by the script for the analysis results:

power_vs_time.dat: Contains power data over time.
temperature_vs_time.dat: Contains temperature data over time.
Troubleshooting
If you encounter issues during execution, such as file path errors or missing data, verify that the data file is correctly placed in the same directory as the script. For encoding-related errors, adjust the script's file reading logic to accommodate the encoding of your data file.